import logging
import asyncio
import aiosqlite
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if TOKEN is None:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

ADMIN_ID = 123456789  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UpdateState(StatesGroup):
    waiting_for_student_id = State()
    waiting_for_new_value = State()

class HomeworkState(StatesGroup):
    waiting_for_homework = State()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–º–∞—à–∫–∏
@dp.message(F.text == "üìö –ú–æ—è –¥–æ–º–∞—à–∫–∞")
async def show_homework(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT homework FROM students WHERE id=?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result and result[0] != "–ù–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è":
                await message.answer(f"üìå –¢–≤–æ—è –¥–æ–º–∞—à–∫–∞:\n{result[0]}")
            else:
                await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –¥–æ–º–∞—à–∫–∏. –ü–æ–ø—Ä–æ—Å–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–∏—Ç—å –µ—ë!")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@dp.message(F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def student_progress(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT progress FROM students WHERE id=?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result and result[0] != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö":
                await message.answer(f"üìà –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n{result[0]}")
            else:
                await message.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω. –û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é!")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message(F.text == "üìÜ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def student_schedule(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT schedule FROM students WHERE id=?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result and result[0] != "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è":
                await message.answer(f"üìÜ –¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{result[0]}")
            else:
                await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –°–≤—è–∂–∏—Å—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º!")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–∫–∏
@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É")
async def request_homework(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).")
    await state.set_state(HomeworkState.waiting_for_homework)

@dp.message(HomeworkState.waiting_for_homework, F.content_type.in_(['text', 'photo', 'document']))
async def receive_homework(message: types.Message, state: FSMContext):
    student_id = message.from_user.id
    text = message.text or ""

    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id

    async with aiosqlite.connect("students.db") as db:
        await db.execute("INSERT INTO homeworks (student_id, text, file_id) VALUES (?, ?, ?)",
                         (student_id, text, file_id))
        await db.commit()

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
    await bot.send_message(ADMIN_ID, f"üìå –£—á–µ–Ω–∏–∫ {student_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–º–∞—à–∫—É.")

    await message.answer("‚úÖ –î–æ–º–∞—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ (–ø—Ä–æ–≥—Ä–µ—Å—Å, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–º–∞—à–∫–∞)
@dp.message(F.text.in_(["üìà –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", "üìÜ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üìö –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É"]))
async def update_data_prompt(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await state.update_data(update_type=message.text)
    await state.set_state(UpdateState.waiting_for_student_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:")

@dp.message(UpdateState.waiting_for_student_id)
async def update_student_data(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ö†Ô∏è ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(student_id=int(message.text))
    await state.set_state(UpdateState.waiting_for_new_value)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")

@dp.message(UpdateState.waiting_for_new_value)
async def save_updated_data(message: types.Message, state: FSMContext):
    new_value = message.text.strip()
    data = await state.get_data()
    student_id = data["student_id"]
    update_type = data["update_type"]

    async with aiosqlite.connect("students.db") as db:
        if update_type == "üìà –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å":
            await db.execute("UPDATE students SET progress = ? WHERE id = ?", (new_value, student_id))
        elif update_type == "üìÜ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            await db.execute("UPDATE students SET schedule = ? WHERE id = ?", (new_value, student_id))
        elif update_type == "üìö –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É":
            await db.execute("UPDATE students SET homework = ? WHERE id = ?", (new_value, student_id))
        await db.commit()

    await state.clear()
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞–º
async def send_reminders():
    while True:
        now = datetime.now()
        async with aiosqlite.connect("students.db") as db:
            async with db.execute("SELECT id, schedule FROM students") as cursor:
                students = await cursor.fetchall()

        for student_id, schedule in students:
            if not schedule or schedule == "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è":
                continue
            try:
                lesson_time = datetime.strptime(schedule, "%Y-%m-%d %H:%M")

                if lesson_time - timedelta(hours=2) <= now < lesson_time - timedelta(hours=1, minutes=55):
                    await bot.send_message(student_id,
                                           "üìå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É —Ç–µ–±—è —É—Ä–æ–∫. –ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–º–∞—à–∫—É!")

                elif lesson_time + timedelta(minutes=5) <= now < lesson_time + timedelta(minutes=10):
                    await bot.send_message(student_id, "üí≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –æ–ø–ª–∞—Ç–∏—Ç—å —É—Ä–æ–∫.")

            except ValueError:
                continue

        await asyncio.sleep(300)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    async with aiosqlite.connect("students.db") as db:
        await db.execute('''
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY,
            name TEXT,
            progress TEXT DEFAULT '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            schedule TEXT DEFAULT '–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
            homework TEXT DEFAULT '–ù–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
        )
        ''')
        await db.execute('''
        CREATE TABLE IF NOT EXISTS homeworks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER,
            text TEXT,
            file_id TEXT
        )
        ''')
        await db.commit()

    asyncio.create_task(send_reminders())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
