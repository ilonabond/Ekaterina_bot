import logging
import asyncio
import aiosqlite
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

ADMIN_PHONE = "+79818862605"  # –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID

API_TOKEN = TOKEN

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# üîπ –°–æ—Å—Ç–æ—è–Ω–∏—è
class LoginState(StatesGroup):
    waiting_for_id = State()

class RegisterState(StatesGroup):
    waiting_for_name = State()

class UpdateState(StatesGroup):
    waiting_for_student_id = State()
    waiting_for_new_value = State()
    update_type = State()

class HomeworkState(StatesGroup):
    waiting_for_homework = State()


start_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")],
        [KeyboardButton(text="üîë –í–æ–π—Ç–∏")],
        [KeyboardButton(text="‚ÑπÔ∏è –û —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ")]
    ],
    resize_keyboard=True
)


student_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –ú–æ—è –¥–æ–º–∞—à–∫–∞"), KeyboardButton(text="üìÜ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó")]
    ],
    resize_keyboard=True
)

admin_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")],
        [KeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–∫–∏"), KeyboardButton(text="üìà –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")],
        [KeyboardButton(text="üìÜ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="üìö –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É")]
    ],
    resize_keyboard=True
)


# ====== –ö–û–ú–ê–ù–î–ê /START ======
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_menu)

@dp.message(F.text == "üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def register_student(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True
    ))
    await state.set_state(RegisterState.waiting_for_name)  # –ù–æ–≤—ã–π state –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

@dp.message(RegisterState.waiting_for_name, F.contact)
async def process_registration(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    async with aiosqlite.connect("students.db") as db:
        await db.execute(
            "INSERT INTO students (id, name, phone) VALUES (?, ?, ?) ON CONFLICT(id) DO NOTHING",
            (user_id, user_name, phone_number)
        )
        await db.commit()

    await message.answer(f"‚úÖ {user_name}, —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n–¢–≤–æ–π –Ω–æ–º–µ—Ä: `{phone_number}`", reply_markup=student_menu)
    await state.clear()

# ====== –í–•–û–î ======
@dp.message(F.text == "üîë –í–æ–π—Ç–∏")
async def login_request(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞.", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True
    ))
    await state.set_state(LoginState.waiting_for_id)  # –ù–æ–≤—ã–π state –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

@dp.message(LoginState.waiting_for_id, F.contact)
async def process_login(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    if phone_number == str(ADMIN_PHONE):
        await message.answer("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!", reply_markup=admin_menu)
        await state.clear()
        return

    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT id FROM students WHERE phone=?", (phone_number,)) as cursor:
            student = await cursor.fetchone()

    await state.clear()

    if student:
        await message.answer("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!", reply_markup=student_menu)
    else:
        await message.answer("‚õî –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.")

# üîπ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–º–∞—à–∫–∏
@dp.message(F.text == "üìö –ú–æ—è –¥–æ–º–∞—à–∫–∞")
async def show_homework(message: types.Message):
    phone_number = message.contact.phone_number
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT homework FROM students WHERE phone_number=?", (phone_number,)) as cursor:
            result = await cursor.fetchone()

    await message.answer(f"üìå –¢–≤–æ—è –¥–æ–º–∞—à–∫–∞:\n{result[0] if result else '–ù–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'}")

# üîπ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@dp.message(F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def student_progress(message: types.Message):
    phone_number = message.contact.phone_number
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT progress FROM students WHERE phone_number=?", (phone_number,)) as cursor:
            result = await cursor.fetchone()

    await message.answer(f"üìà –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n{result[0] if result else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")

# üîπ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message(F.text == "üìÜ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def student_schedule(message: types.Message):
    phone_number = message.contact.phone_number
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT schedule FROM students WHERE phone_number=?", (phone_number,)) as cursor:
            result = await cursor.fetchone()

    await message.answer(f"üìÜ –¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{result[0] if result else '–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'}")


# ====== –û–¢–ü–†–ê–í–ö–ê –î–û–ú–ê–®–ö–ò ======
@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó")
async def request_homework(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).")
    await state.set_state(HomeworkState.waiting_for_homework)

@dp.message(HomeworkState.waiting_for_homework, F.content_type.in_(['text', 'photo', 'document']))
async def receive_homework(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    text = message.text or ""

    file_id = None
    file_url = None

    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id

    async with aiosqlite.connect("students.db") as db:
        await db.execute("INSERT INTO homeworks (student_phone, text, file_id, file_url) VALUES (?, ?, ?, ?)",
                         (phone_number, text, file_id, file_url))
        await db.commit()

    await message.answer("‚úÖ –î–æ–º–∞—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=student_menu)
    await state.clear()

@dp.message(F.text.in_(["üìà –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", "üìÜ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üìö –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É"]))
async def update_data_prompt(message: types.Message, state: FSMContext):
    if message.contact.phone_number != ADMIN_PHONE:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await state.update_data(update_type=message.text)
    await state.set_state(UpdateState.waiting_for_student_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—á–µ–Ω–∏–∫–∞:")

@dp.message(UpdateState.waiting_for_student_id)
async def update_student_data(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()
    await state.update_data(student_phone=phone_number)
    await state.set_state(UpdateState.waiting_for_new_value)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")


@dp.message(UpdateState.waiting_for_new_value)
async def update_value(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    student_phone = user_data['student_phone']
    new_value = message.text.strip()
    update_type = user_data['update_type']

    async with aiosqlite.connect("students.db") as db:
        if update_type == "üìà –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å":
            await db.execute("UPDATE students SET progress=? WHERE phone=?", (new_value, student_phone))
        elif update_type == "üìÜ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            await db.execute("UPDATE students SET schedule=? WHERE phone=?", (new_value, student_phone))
        elif update_type == "üìö –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É":
            await db.execute("UPDATE students SET homework=? WHERE phone=?", (new_value, student_phone))
        await db.commit()

    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=admin_menu)
    await state.clear()

# üîπ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞–º
async def send_reminders():
    while True:
        now = datetime.now()
        async with aiosqlite.connect("students.db") as db:
            async with db.execute("SELECT phone, schedule FROM students") as cursor:
                students = await cursor.fetchall()

        for phone_number, schedule in students:
            if not schedule or schedule == "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è":
                continue
            try:
                lesson_time = datetime.strptime(schedule, "%Y-%m-%d %H:%M")
                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ —É—Ä–æ–∫–∞ –æ —Ç–æ–º, —á—Ç–æ —É—Ä–æ–∫ —Å–∫–æ—Ä–æ –∏ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É
                if lesson_time - timedelta(hours=2) <= now < lesson_time - timedelta(hours=1, minutes=55):
                    await bot.send_message(phone_number, "üìå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É —Ç–µ–±—è —É—Ä–æ–∫. –ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–º–∞—à–∫—É.")
                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 5-10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
                elif lesson_time + timedelta(minutes=5) <= now < lesson_time + timedelta(minutes=10):
                    await bot.send_message(phone_number, "üí≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –æ–ø–ª–∞—Ç–∏—Ç—å —É—Ä–æ–∫.")
            except ValueError:
                continue

        await asyncio.sleep(300)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (5 –º

# ====== –û –†–ï–ü–ï–¢–ò–¢–û–†–ï ======
@dp.message(F.text == "‚ÑπÔ∏è –û —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ")
async def about_tutor(message: types.Message):
    tutor_info = (
        "üë©‚Äçüè´ –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞, —è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É. "
        "–ú–æ—è —Ü–µ–ª—å ‚Äì –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö –∏ –¥–æ–±–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–∞ –≤ —É—á–µ–±–µ! üìö\n\n"
        "üìù –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å—É ‚Äì –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è!"
    )
    await message.answer(tutor_info)

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
async def list_students(message: types.Message):
    if message.from_user.phone_number != ADMIN_PHONE:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
        return

    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT phone, name FROM students") as cursor:
            students = await cursor.fetchall()

    if not students:
        await message.answer("üìÇ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")

    student_list = "\n".join([f"üë§ {name} (–¢–µ–ª–µ—Ñ–æ–Ω: {phone})" for phone, name in students])
    await message.answer(f"üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n{student_list}")

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    async with aiosqlite.connect("students.db") as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS students (
            phone TEXT PRIMARY KEY, 
            name TEXT, 
            progress TEXT DEFAULT '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', 
            schedule TEXT DEFAULT '–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', 
            homework TEXT DEFAULT '–ù–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
        )""")
        await db.execute("""
        CREATE TABLE IF NOT EXISTS homeworks (
            id INTEGER PRIMARY KEY AUTOINCREMENT, 
            student_phone TEXT, 
            text TEXT, 
            file_id TEXT,
            FOREIGN KEY (student_phone) REFERENCES students (phone)
        )""")
        await db.commit()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
