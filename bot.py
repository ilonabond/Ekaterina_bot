import logging
import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if TOKEN is None:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ)
async def init_db():
    async with aiosqlite.connect("students.db") as db:
        await db.execute('''
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY,
            name TEXT,
            progress TEXT
        )
        ''')
        await db.commit()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"), KeyboardButton(text="üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="‚ÑπÔ∏è –û —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ")]
    ],
    resize_keyboard=True
)
# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user_name = message.from_user.first_name if message.from_user else "—É—á–µ–Ω–∏–∫"
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n–Ø ‚Äì –±–æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=menu)


# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer("–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.")


# –†–∞–∑–¥–µ–ª ¬´–û —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ¬ª
@dp.message(lambda message: message.text.strip().lower() == "‚ÑπÔ∏è –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ")
async def about_teacher(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ ‚Äì —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É. –ì–æ—Ç–æ–≤–ª—é –∫ –û–ì–≠ –∏ –ï–ì–≠. üìö")


# –†–∞–∑–¥–µ–ª ¬´–ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–∞¬ª
@dp.message(lambda message: message.text.strip().lower() == "üìä –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def student_progress(message: types.Message):
    user_id = message.from_user.id if message.from_user else 0
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT progress FROM students WHERE id=?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result:
                await message.answer(f"üìà –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {result[0]}")
            else:
                await message.answer("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–ø–æ–ª–Ω—é –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π!")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ aiogram v3
async def main():
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
