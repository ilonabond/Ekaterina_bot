import logging
import asyncio
import aiosqlite
import pytz
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import os

MOSCOW_TZ = pytz.timezone("Europe/Moscow")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

ADMIN_ID = int(os.getenv("ADMIN_ID", "1000461829"))  # –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# üîπ –°–æ—Å—Ç–æ—è–Ω–∏—è
class LoginState(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

class AddStudentState(StatesGroup):
    waiting_for_name = State()
    waiting_for_login = State()
    waiting_for_password = State()

class DeleteStudentState(StatesGroup):
    waiting_for_login = State()

class UpdateState(StatesGroup):
    waiting_for_student_login = State()
    waiting_for_new_value = State()
    update_type = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîë –í–æ–π—Ç–∏")],
        [KeyboardButton(text="‚ÑπÔ∏è –û —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ")]
    ],
    resize_keyboard=True
)

student_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –ú–æ—è –¥–æ–º–∞—à–∫–∞"), KeyboardButton(text="üìÜ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó")]
    ],
    resize_keyboard=True
)

admin_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤"), KeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–∫–∏")],
        [KeyboardButton(text="üìà –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="üìÜ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìö –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É")]
    ],
    resize_keyboard=True
)

# ====== –ö–û–ú–ê–ù–î–ê /START ======
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_menu)

# ====== –í–•–û–î ======
@dp.message(F.text == "üîë –í–æ–π—Ç–∏")
async def login_request(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `12345`):")
    await state.set_state(LoginState.waiting_for_login)

@dp.message(LoginState.waiting_for_login)
async def process_login(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(login=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `67890`):")
    await state.set_state(LoginState.waiting_for_password)

@dp.message(LoginState.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = await state.get_data()
    login, password = data["login"], message.text

    if message.from_user.id == ADMIN_ID:
        await message.answer("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!", reply_markup=admin_menu)
        await state.clear()
        return

    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT name FROM students WHERE login=? AND password=?", (login, password)) as cursor:
            student = await cursor.fetchone()

    await state.clear()

    if student:
        await message.answer(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, {student[0]}!", reply_markup=student_menu)
    else:
        await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")

# ====== –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ß–ï–ù–ò–ö–ê ======
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
async def add_student_start(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(AddStudentState.waiting_for_name)

@dp.message(AddStudentState.waiting_for_name)
async def add_student_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω (—á–∏—Å–ª–æ):")
    await state.set_state(AddStudentState.waiting_for_login)

@dp.message(AddStudentState.waiting_for_login)
async def add_student_login(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(login=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (—á–∏—Å–ª–æ):")
    await state.set_state(AddStudentState.waiting_for_password)

@dp.message(AddStudentState.waiting_for_password)
async def add_student_password(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = await state.get_data()
    name, login, password = data["name"], data["login"], message.text

    async with aiosqlite.connect("students.db") as db:
        await db.execute("INSERT INTO students (login, password, name) VALUES (?, ?, ?)", (login, password, name))
        await db.commit()

    await message.answer(f"‚úÖ –£—á–µ–Ω–∏–∫ {name} –¥–æ–±–∞–≤–ª–µ–Ω!\nüîë –õ–æ–≥–∏–Ω: {login}\nüîê –ü–∞—Ä–æ–ª—å: {password}")
    await state.clear()

# ====== –£–î–ê–õ–ï–ù–ò–ï –£–ß–ï–ù–ò–ö–ê ======
@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
async def delete_student_start(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(DeleteStudentState.waiting_for_login)

@dp.message(DeleteStudentState.waiting_for_login)
async def delete_student(message: types.Message, state: FSMContext):
    login = message.text

    async with aiosqlite.connect("students.db") as db:
        await db.execute("DELETE FROM students WHERE login=?", (login,))
        await db.commit()

    await message.answer(f"‚úÖ –£—á–µ–Ω–∏–∫ —Å –ª–æ–≥–∏–Ω–æ–º {login} —É–¥–∞–ª—ë–Ω.")
    await state.clear()

# üîπ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤")
async def list_students(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤.")
        return

    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT login, name FROM students") as cursor:
            students = await cursor.fetchall()

    if not students:
        await message.answer("üìÇ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")
    else:
        student_list = "\n".join([f"üë§ {name} (–õ–æ–≥–∏–Ω: {login})" for login, name in students])
        await message.answer(f"üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n\n{student_list}")


# ====== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ß–ï–ù–ò–ö–û–í ======
@dp.message(lambda message: message.text == "üìö –ú–æ—è –¥–æ–º–∞—à–∫–∞")
async def show_homework(message: types.Message, state: FSMContext):
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT homework FROM students WHERE login=?", (str(message.from_user.id),)) as cursor:
            result = await cursor.fetchone()

    homework_text = result[0] if result else "–ù–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"
    await message.answer(f"üìå –¢–≤–æ—è –¥–æ–º–∞—à–∫–∞:\n{homework_text}")


@dp.message(lambda message: message.text == "üìÜ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def student_schedule(message: types.Message):
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT schedule FROM students WHERE login=?", (str(message.from_user.id),)) as cursor:
            result = await cursor.fetchone()

    schedule_text = result[0] if result else "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
    await message.answer(f"üìÜ –¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{schedule_text}")


@dp.message(lambda message: message.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def view_progress(message: types.Message):
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT progress FROM students WHERE login=?", (str(message.from_user.id),)) as cursor:
            result = await cursor.fetchone()

    progress_text = result[0] if result else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"
    await message.answer(f"üìà –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n{progress_text}")



@dp.message(lambda message: message.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó")
async def request_homework(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ).")
    await state.set_state(UpdateState.waiting_for_new_value)


@dp.message(UpdateState.waiting_for_new_value, F.content_type.in_([types.ContentType.TEXT, types.ContentType.PHOTO]))
async def receive_homework(message: types.Message, state: FSMContext):
    async with aiosqlite.connect("students.db") as db:
        if message.text:
            await db.execute("UPDATE students SET homework=? WHERE login=?", (message.text, str(message.from_user.id)))
        elif message.photo:
            photo_id = message.photo[-1].file_id
            await db.execute("UPDATE students SET homework=? WHERE login=?", (photo_id, str(message.from_user.id)))

        await db.commit()

    await message.answer("‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await state.clear()



# ====== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø ======
@dp.message(lambda message: message.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–∫–∏")
async def view_homeworks(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT phone, homework FROM students") as cursor:
            homeworks = await cursor.fetchall()

    homework_list = "\n\n".join([f"üì± {phone}: {hw}" for phone, hw in homeworks])
    await message.answer(f"üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n{homework_list}")


@dp.message(F.text.in_(["üìà –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", "üìÜ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üìö –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É"]))
async def update_student_info(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    update_type = "progress" if "–ø—Ä–æ–≥—Ä–µ—Å—Å" in message.text else "schedule" if "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in message.text else "homework"
    await state.update_data(update_type=update_type)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω —É—á–µ–Ω–∏–∫–∞:")
    await state.set_state(UpdateState.waiting_for_student_login)

@dp.message(UpdateState.waiting_for_student_login)
async def get_student_login(message: types.Message, state: FSMContext):
    await state.update_data(student_login=message.text.strip())

    update_type = (await state.get_data()).get("update_type")
    if update_type == "schedule":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`:")
    elif update_type == "progress":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–∞:")
    elif update_type == "homework":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:")

    await state.set_state(UpdateState.waiting_for_new_value)

@dp.message(UpdateState.waiting_for_new_value)
async def save_new_value(message: types.Message, state: FSMContext):
    new_value = message.text.strip()
    data = await state.get_data()
    student_login = data.get("student_login")
    update_type = data.get("update_type")

    if update_type == "schedule":
        try:
            datetime.strptime(new_value, "%d.%m.%Y %H:%M")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`.")
            return

    async with aiosqlite.connect("students.db") as db:
        await db.execute(f"UPDATE students SET {update_type}=? WHERE login=?", (new_value, student_login))
        await db.commit()

    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await state.clear()



# ====== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ======
async def send_reminders():
    while True:
        now = datetime.now(pytz.utc).astimezone(MOSCOW_TZ)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        async with aiosqlite.connect("students.db") as db:
            async with db.execute("SELECT login, schedule FROM students") as cursor:
                students = await cursor.fetchall()

        for login, schedule in students:
            if not schedule:
                continue
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è —É—Ä–æ–∫–∞ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                lesson_time = datetime.strptime(schedule, "%d.%m.%Y %H:%M").replace(tzinfo=MOSCOW_TZ)

                # üîπ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ —É—Ä–æ–∫–∞
                if lesson_time - timedelta(hours=2) <= now < lesson_time - timedelta(hours=1, minutes=55):
                    await bot.send_message(login, "üìå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É —Ç–µ–±—è —É—Ä–æ–∫, –Ω–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å –î–ó.")

                # üîπ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞
                elif lesson_time + timedelta(minutes=5) <= now < lesson_time + timedelta(minutes=10):
                    await bot.send_message(login, "üí≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –æ–ø–ª–∞—Ç–∏—Ç—å —É—Ä–æ–∫.")

                # üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —É—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã (—á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞)
                elif now >= lesson_time + timedelta(minutes=15):
                    async with aiosqlite.connect("students.db") as db:
                        await db.execute("UPDATE students SET schedule=NULL WHERE login=?", (login,))
                        await db.commit()
                        await bot.send_message(login, "‚úÖ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

            except ValueError:
                continue

        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç


# ====== –û –†–ï–ü–ï–¢–ò–¢–û–†–ï ======
@dp.message(lambda message: message.text == "‚ÑπÔ∏è –û —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ")
async def about_tutor(message: types.Message):
    tutor_info = ("üë©‚Äçüè´ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è - —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞, –ø—Ä–µ–ø–æ–¥–∞—é –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."
                  "–ü–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö! üìö")
    await message.answer(tutor_info)


# üîπ –ó–∞–ø—É—Å–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def setup_database():
    async with aiosqlite.connect("students.db") as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS students (
            login TEXT PRIMARY KEY,
            password TEXT,
            name TEXT,
            schedule TEXT DEFAULT NULL,
            progress TEXT DEFAULT NULL,
            homework TEXT DEFAULT NULL
        )""")
        await db.commit()


async def main():
    await setup_database()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
