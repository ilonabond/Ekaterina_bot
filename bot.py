import logging
import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if TOKEN is None:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

# ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
ADMIN_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ)
async def init_db():
    async with aiosqlite.connect("students.db") as db:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await db.execute('''
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY,
            name TEXT,
            progress TEXT DEFAULT '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            homework TEXT DEFAULT '–ù–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è',
            schedule TEXT DEFAULT '–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'
        )
        ''')
        await db.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
async def add_columns():
    async with aiosqlite.connect("students.db") as db:
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ 'homework', –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            await db.execute("ALTER TABLE students ADD COLUMN homework TEXT DEFAULT '–ù–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è'")
            await db.execute("ALTER TABLE students ADD COLUMN schedule TEXT DEFAULT '–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'")
            await db.commit()
        except Exception as e:
            # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫: {e}")

start_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), KeyboardButton(text="üîë –í–æ–π—Ç–∏")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –ú–æ—è –¥–æ–º–∞—à–∫–∞"), KeyboardButton(text="üìÜ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="‚ÑπÔ∏è –û —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ")],
        [KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")]
    ],
    resize_keyboard=True
)

# ====== –ö–û–ú–ê–ù–î–ê /START ======
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT id FROM students WHERE id=?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result:
                await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=main_menu)
            else:
                await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è.", reply_markup=start_menu)


# ====== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–ß–ï–ù–ò–ö–ê ======
@dp.message(lambda message: message.text.strip().lower() == "üîë —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def register_student(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    async with aiosqlite.connect("students.db") as db:
        await db.execute(
            "INSERT INTO students (id, name) VALUES (?, ?) ON CONFLICT(id) DO NOTHING",
            (user_id, user_name)
        )
        await db.commit()

    await message.answer(f"‚úÖ {user_name}, —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", reply_markup=main_menu)


# ====== –í–•–û–î –ü–û ID ======
@dp.message(lambda message: message.text.strip().lower() == "üîë –≤–æ–π—Ç–∏")
async def login_by_id(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT id FROM students WHERE id=?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result:
                await message.answer("–¢—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à—ë–ª!", reply_markup=main_menu)
            else:
                await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message(lambda message: message.text.strip().lower() == "üìÜ –º–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT schedule FROM students WHERE id=?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result:
                await message.answer(f"üìÖ –¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{result[0]}")
            else:
                await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏ /register")

@dp.message(Command("update_schedule"))
async def update_schedule(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ `|` (–ø—Ä–∏–º–µ—Ä: `123456|–ó–∞–Ω—è—Ç–∏–µ –≤ —Å—Ä–µ–¥—É 18:00`).")


# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–º–∞—à–∫–∏
@dp.message(lambda message: message.text.strip().lower() == "üìö –º–æ—è –¥–æ–º–∞—à–∫–∞")
async def show_homework(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT homework FROM students WHERE id=?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result:
                await message.answer(f"üìå –¢–≤–æ—è –¥–æ–º–∞—à–∫–∞:\n{result[0]}")
            else:
                await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏ /register")

@dp.message(Command("update_homework"))
async def update_homework(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞ –∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ `|` (–ø—Ä–∏–º–µ—Ä: `123456|–°–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç ‚Ññ3`).")


# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@dp.message(lambda message: message.text.strip().lower() == "üìä –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def student_progress(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT progress FROM students WHERE id=?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result:
                await message.answer(f"üìà –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n{result[0]}")
            else:
                await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏ /register")

@dp.message(Command("update_progress"))
async def update_progress(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞ –∏ –µ–≥–æ –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ `|` (–ø—Ä–∏–º–µ—Ä: `123456|–°–¥–∞–ª —Ç–µ—Å—Ç –Ω–∞ 90%`).")

# ====== –û —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ ======
@dp.message(lambda message: message.text.strip().lower() == "‚ÑπÔ∏è –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ")
async def about_tutor(message: types.Message):
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
    tutor_info = (
        "üë®‚Äçüè´ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞. –Ø —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É. –ú–æ—è —Ü–µ–ª—å - –ø–æ–º–æ—á—å –í–∞–º —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏.\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –¥–æ–º–∞—à–∫–µ, –ø—Ä–æ–≥—Ä–µ—Å—Å—É –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é - –≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞—â–∞–π—Å—è!"
    )

    await message.answer(tutor_info)

# ====== –ó–ê–î–ê–¢–¨ –í–û–ü–†–û–° –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Æ ======
@dp.message(lambda message: message.text.strip().lower() == "‚ùì –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
async def ask_question(message: types.Message):
    # –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É —É—á–µ–Ω–∏–∫–∞ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–±–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# ====== –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ü–†–û–°–ê –£–ß–ï–ù–ò–ö–ê ======
@dp.message(lambda message: message.text.strip() != "‚ùì –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
async def save_and_notify_teacher(message: types.Message):
    student_id = message.from_user.id
    question = message.text.strip()

    async with aiosqlite.connect("students.db") as db:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.execute(
            "INSERT INTO questions (student_id, question) VALUES (?, ?)",
            (student_id, question)
        )
        await db.commit()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
    teacher_message = f"–£—á–µ–Ω–∏–∫ —Å ID {student_id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n{question}"

    await bot.send_message(ADMIN_ID, teacher_message)
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é. –û–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
async def init_db():
    async with aiosqlite.connect("students.db") as db:
        await db.execute('''
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY,
            name TEXT,
            progress TEXT DEFAULT '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            homework TEXT DEFAULT '–ù–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è',
            schedule TEXT DEFAULT '–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'
        )
        ''')

        await db.execute('''
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER,
            question TEXT,
            answered BOOLEAN DEFAULT FALSE,
            FOREIGN KEY(student_id) REFERENCES students(id)
        )
        ''')

        await db.commit()

# ====== –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ –ü–†–û–°–ú–ê–¢–†–ò–í–ê–ï–¢ –í–û–ü–†–û–°–´ ======
@dp.message(lambda message: message.text.strip().lower() == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤")
async def view_questions(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT id, student_id, question FROM questions WHERE answered = FALSE") as cursor:
            questions = await cursor.fetchall()

    if not questions:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")
        return

    for q in questions:
        student_id, question = q[1], q[2]
        await message.answer(f"–í–æ–ø—Ä–æ—Å –æ—Ç —É—á–µ–Ω–∏–∫–∞ —Å ID {student_id}:\n{question}\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç.")

# ====== –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ –û–¢–í–ï–ß–ê–ï–¢ –ù–ê –í–û–ü–†–û–° ======
@dp.message(lambda message: message.text.strip() != "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤" and message.from_user.id == ADMIN_ID)
async def answer_question(message: types.Message):
    # –û—Ç–≤–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å
    answer = message.text.strip()

    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT id, student_id, question FROM questions WHERE answered = FALSE LIMIT 1") as cursor:
            question = await cursor.fetchone()

        if question:
            question_id, student_id, student_question = question
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–æ–º–µ—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
            await db.execute("UPDATE questions SET answered = TRUE WHERE id = ?", (question_id,))
            await db.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫—É
            await bot.send_message(student_id, f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n{answer}")
            await message.answer(f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç —É—á–µ–Ω–∏–∫–∞ —Å ID {student_id} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        else:
            await message.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await add_columns()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
