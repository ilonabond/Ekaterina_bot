import logging
import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if TOKEN is None:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

# ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
ADMIN_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ)
async def init_db():
    async with aiosqlite.connect("students.db") as db:
        await db.execute('''
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY,
            name TEXT,
            progress TEXT DEFAULT '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            homework TEXT DEFAULT '–ù–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è',
            schedule TEXT DEFAULT '–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'
        )
        ''')
        await db.commit()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –ú–æ—è –¥–æ–º–∞—à–∫–∞"), KeyboardButton(text="üìÜ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="‚ÑπÔ∏è –û —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ")]
    ],
    resize_keyboard=True
)


# ====== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–ß–ï–ù–ò–ö–ê ======
@dp.message(Command("register"))
async def register_student(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    async with aiosqlite.connect("students.db") as db:
        await db.execute(
            "INSERT INTO students (id, name) VALUES (?, ?) ON CONFLICT(id) DO NOTHING",
            (user_id, user_name)
        )
        await db.commit()

    await message.answer(f"‚úÖ {user_name}, —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", reply_markup=menu)


# ====== –ü–†–û–°–ú–û–¢–† –†–ê–°–ü–ò–°–ê–ù–ò–Ø ======
@dp.message(lambda message: message.text.strip().lower() == "üìÜ –º–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT schedule FROM students WHERE id=?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result:
                await message.answer(f"üìÖ –¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{result[0]}")
            else:
                await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏ /register")


# ====== –ü–†–û–°–ú–û–¢–† –î–û–ú–ê–®–ö–ò ======
@dp.message(lambda message: message.text.strip().lower() == "üìö –º–æ—è –¥–æ–º–∞—à–∫–∞")
async def show_homework(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT homework FROM students WHERE id=?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result:
                await message.answer(f"üìå –¢–≤–æ—è –¥–æ–º–∞—à–∫–∞:\n{result[0]}")
            else:
                await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏ /register")


# ====== –ü–†–û–°–ú–û–¢–† –ü–†–û–ì–†–ï–°–°–ê ======
@dp.message(lambda message: message.text.strip().lower() == "üìä –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def student_progress(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT progress FROM students WHERE id=?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result:
                await message.answer(f"üìà –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n{result[0]}")
            else:
                await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏ /register")


# ====== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–û–ì–†–ï–°–°–ê (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ê) ======
@dp.message(Command("update_progress"))
async def update_progress(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞ –∏ –µ–≥–æ –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ `|` (–ø—Ä–∏–º–µ—Ä: `123456|–°–¥–∞–ª —Ç–µ—Å—Ç –Ω–∞ 90%`).")


@dp.message(lambda message: "|" in message.text and message.from_user.id == ADMIN_ID)
async def save_progress(message: types.Message):
    try:
        student_id, progress = message.text.split("|", 1)
        student_id = int(student_id.strip())
        progress = progress.strip()

        async with aiosqlite.connect("students.db") as db:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
            async with db.execute("SELECT id FROM students WHERE id=?", (student_id,)) as cursor:
                result = await cursor.fetchone()
                if not result:
                    await message.answer(f"‚ùå –£—á–µ–Ω–∏–∫ —Å ID {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                    return

            await db.execute(
                "UPDATE students SET progress=? WHERE id=?", (progress, student_id)
            )
            await db.commit()

        await message.answer(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–∞ {student_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {progress}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ `|`.")


# ====== –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–û–ú–ê–®–ö–ò (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ê) ======
@dp.message(Command("update_homework"))
async def update_homework(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞ –∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ `|` (–ø—Ä–∏–º–µ—Ä: `123456|–°–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç ‚Ññ3`).")


@dp.message(lambda message: "|" in message.text and message.from_user.id == ADMIN_ID)
async def save_homework(message: types.Message):
    try:
        student_id, homework = message.text.split("|", 1)
        student_id = int(student_id.strip())
        homework = homework.strip()

        async with aiosqlite.connect("students.db") as db:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
            async with db.execute("SELECT id FROM students WHERE id=?", (student_id,)) as cursor:
                result = await cursor.fetchone()
                if not result:
                    await message.answer(f"‚ùå –£—á–µ–Ω–∏–∫ —Å ID {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                    return

            await db.execute(
                "UPDATE students SET homework=? WHERE id=?", (homework, student_id)
            )
            await db.commit()

        await message.answer(f"‚úÖ –î–æ–º–∞—à–∫–∞ —É—á–µ–Ω–∏–∫–∞ {student_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {homework}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞ –∏ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ `|`.")


# ====== –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ê) ======
@dp.message(Command("update_schedule"))
async def update_schedule(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ `|` (–ø—Ä–∏–º–µ—Ä: `123456|–ó–∞–Ω—è—Ç–∏–µ –≤ —Å—Ä–µ–¥—É 18:00`).")


@dp.message(lambda message: "|" in message.text and message.from_user.id == ADMIN_ID)
async def save_schedule(message: types.Message):
    try:
        student_id, schedule = message.text.split("|", 1)
        student_id = int(student_id.strip())
        schedule = schedule.strip()

        async with aiosqlite.connect("students.db") as db:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
            async with db.execute("SELECT id FROM students WHERE id=?", (student_id,)) as cursor:
                result = await cursor.fetchone()
                if not result:
                    await message.answer(f"‚ùå –£—á–µ–Ω–∏–∫ —Å ID {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                    return

            await db.execute(
                "UPDATE students SET schedule=? WHERE id=?", (schedule, student_id)
            )
            await db.commit()

        await message.answer(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ {student_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {schedule}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ `|`.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
