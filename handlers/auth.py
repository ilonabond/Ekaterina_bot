from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_student
from config import ADMIN_ID
from utils import start_menu, student_keyboard, admin_keyboard
import aiosqlite

router = Router()

class AuthState(StatesGroup):
    login = State()
    password = State()

# ====== –ö–û–ú–ê–ù–î–ê /START ======
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_menu())

# ====== –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏" ======
@router.message(lambda message: message.text == "üîë –í–æ–π—Ç–∏")
async def login_request(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `12345`):")
    await state.set_state(AuthState.login)

# ====== –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ ======
@router.message(AuthState.login)
async def process_login(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(login=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `67890`):")
    await state.set_state(AuthState.password)

# ====== –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è ======
@router.message(AuthState.password)
async def process_password(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = await state.get_data()
    login, password = data["login"], message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if login == ADMIN_ID:
        await message.answer("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!", reply_markup=admin_keyboard())
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect("students.db") as db:
        async with db.execute("SELECT name FROM students WHERE login=? AND password=?", (login, password)) as cursor:
            student = await cursor.fetchone()

    await state.clear()

    if student:
        await message.answer(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, {student[0]}!", reply_markup=student_keyboard())
    else:
        await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")

# ====== –ö–æ–º–∞–Ω–¥–∞ /about_tutor –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "‚ÑπÔ∏è –û —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ" ======
TUTOR_INFO = """
–Ø –≤–∞—à —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä, –∏ —è –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –í–∞–º —Å –≤–∞—à–∏–º —É—á–µ–±–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º!

–ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:
- –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
- –§–∏–∑–∏–∫–∞
- –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫

–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã.
"""

@router.message(lambda message: message.text == "‚ÑπÔ∏è –û —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ" or message.text == "/about_tutor")
async def about_tutor(message: types.Message):
    await message.answer(TUTOR_INFO)
